= rserve-simpler

rserve-client is a fantastic gem that lets a user communicate with R in a
straighforward, efficient way.  rserve-simpler provides some simple additions
to make some things even easier.

rserve-simpler is layered on top of the well-written rserve-client.  See
{rserve-client}[https://github.com/clbustos/Rserve-Ruby-client] for more
background and for doing anything fancy.

== Synposis

Using Ruby 1.9 hash syntax, but this should work on 1.8 if keyed old-school.

    require 'rserve/simpler'
    r = Rserve::Simpler.new

=== #converse

    # converse with R (like eval but applies .to_ruby to result)
    r.converse "mean(c(1,2,3))"  # -> 2.0

    # converse lets you name variables in a hash (1.9 hash syntax)
    r.converse(a: [1,2,3], b: [4,5,6]) { "cor(a,b)" } # -> 1.0
    # another form doing the same thing
    r.converse("cor(a,b)", a: [1,2,3], b: [4,5,6])

==== prompt-like syntax >>

    r >> "mean(c(1,2,3))"  # -> 2.0
    # note: use '.' to get proper behavior with multiple args or blocks
    r.>> "cor(a,b)", a: [1,2,3], b: [1,2,3]

=== #command

    # use the same syntax but without caring about the reply
    r.command(a: [1,2,3], b: [4,5,6]) { "z <- cor(a,b)" }  # -> true
    r.converse "z"  # -> 1.0

=== simple DataFrame
     
    hash = {var1: [1,2,3,4], fac2: [3,4,5,6], res1: [4,5,6,7] }
    r.command( df: hash.to_dataframe ) do 
      %Q{ 
        pdf("out.pdf")
        plot(df)
        dev.off()
      }
    end

    # STructs too

    ........ fill in 

== Copyright

see LICENSE.txt

